# Generated by Haxe 3.3.0

import matplotlib.pyplot as matplotlib_pyplot_Pyplot_Module
import numpy as numpy_Numpy_Module
import seaborn as seaborn_Seaborn_Module


class Main:
    __slots__ = ()

    @staticmethod
    def main():
        seaborn_Seaborn_Module.set_style("darkgrid")
        Main.sinplot()
        matplotlib_pyplot_Pyplot_Module.show()

    @staticmethod
    def sinplot(flip = 1):
        if (flip is None):
            flip = 1
        kwArgs = dict()
        kwArgs["num"] = 100
        this1 = kwArgs
        x = numpy_Numpy_Module.linspace(0,14,**this1)
        _g = 1
        while (_g < 7):
            i = _g
            _g = (_g + 1)
            tmp = ((numpy_Numpy_Module.sin((x + ((i * 0.5)))) * ((7 - i))) * flip)
            kwArgs1 = dict()
            this2 = kwArgs1
            matplotlib_pyplot_Pyplot_Module.plot(x,tmp,**this2)


class KwCall:
    __slots__ = ()


class IterableAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class IteratorAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        return python_HaxeIterator(it)


class DynamicIterationAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class python_HaxeIterator:
    __slots__ = ("it", "x", "has", "checked")

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has




Main.main()