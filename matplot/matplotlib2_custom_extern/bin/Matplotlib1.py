# Generated by Haxe 3.3.0

import matplotlib.pyplot as Pyplot


class Main:
    __slots__ = ()

    @staticmethod
    def main():
        Pyplot.plot([1, 2, 3, 4],**dict())
        Pyplot.ylabel("some numbers")
        Pyplot.show()


class KwCall:
    __slots__ = ()


class IterableAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class IteratorAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        return python_HaxeIterator(it)


class DynamicIterationAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class python_HaxeIterator:
    __slots__ = ("it", "x", "has", "checked")

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has




Main.main()