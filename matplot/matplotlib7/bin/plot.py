# Generated by Haxe 3.3.0

import matplotlib.pyplot as matplotlib_pyplot_Pyplot_Module
import numpy as numpy_Numpy_Module


class Main:
    __slots__ = ()

    @staticmethod
    def main():
        kwArgs = dict()
        this1 = kwArgs
        ax = matplotlib_pyplot_Pyplot_Module.subplot(111,**this1)
        t = numpy_Numpy_Module.arange(0.0,5.0,0.01)
        s = numpy_Numpy_Module.cos(((2 * numpy_Numpy_Module.pi) * t))
        kwArgs1 = dict()
        kwArgs1["lw"] = 2
        this2 = kwArgs1
        line = matplotlib_pyplot_Pyplot_Module.plot(t,s,**this2)
        kwArgs2 = dict()
        kwArgs2["xy"] = (2, 1)
        kwArgs2["xytext"] = (3, 1.5)
        kwArgs2["arrowprops"] = dict(facecolor='black', shrink=0.05)
        this3 = kwArgs2
        matplotlib_pyplot_Pyplot_Module.annotate("local max",**this3)
        kwArgs3 = dict()
        this4 = kwArgs3
        matplotlib_pyplot_Pyplot_Module.ylim(-2,2,**this4)
        matplotlib_pyplot_Pyplot_Module.show()


class KwCall:
    __slots__ = ()


class IterableAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class IteratorAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        return python_HaxeIterator(it)


class DynamicIterationAdaptor:
    __slots__ = ()

    @staticmethod
    def iterator(it):
        _this_x = it
        return python_HaxeIterator(_this_x.__iter__())


class python_HaxeIterator:
    __slots__ = ("it", "x", "has", "checked")

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has




Main.main()